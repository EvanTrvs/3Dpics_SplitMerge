#ifndef CGrapheCreator_h
#define CGrapheCreator_h

#pragma once

#include <vector>
#include <thread>

#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/graph_traits.hpp>
#include <boost/graph/connected_components.hpp>

#include <math.h>
#include <limits>
#include <cmath>
#include <algorithm>
#include <mutex>

#include "CFragment.h"

#define SEUIL_MIN 2
#define UNDIFIED_VERSION 4
#define NO_LEAFS 5

typedef boost::adjacency_list <boost::vecS, boost::vecS, boost::undirectedS, CFragment> BGLGraphe;

class CGrapheCreator {
private:
	BGLGraphe alGPCGraphe;
	vector <BGLGraphe::vertex_descriptor> vvdGPCVertex_Desc;
	vector <vector <unsigned int>> vvuiGPCConnexite;

	vector <std::pair<unsigned int, unsigned int>> vpuiGPCVoisinPrimal;

	std::mutex GPCMutex;

public:

	/************************************************************************************************************************************************
	***** Default Class Constructor																												*****
	*************************************************************************************************************************************************
	***** Input : None																															*****
	***** Precondition : Nothing                                                                                                                *****
	***** Output : None																															*****
	***** Effects : Initialize alGPCGraphe, vvdGPCVertex_Desc and vvuiGPCConnexite to null                                                      *****
	************************************************************************************************************************************************/
	CGrapheCreator();

	/************************************************************************************************************************************************
	***** GCRGetGraphe : Reading Accessor  																										*****
	*************************************************************************************************************************************************
	***** Input : None																															*****
	***** Precondition : Nothing                                                                                                                *****
	***** Output : None																															*****
	***** Effects : Return variable alGPCGraphe																									*****
	************************************************************************************************************************************************/
	BGLGraphe GCRGetGraphe();

	/********************************************************************************************************************************************************
	***** GCRCreationGraphe : Method for create graphe from leafs generated by the Split																*****
	*********************************************************************************************************************************************************
	***** Entrée : vFRGLeafs : vector <CFragment> | uiHomogeneite, uiTailleMin, uiVersionNeighbor, uiVersionMerge : unsigned int						*****
	***** Precondition : Nothing																														*****
	***** Output : None																																	*****
	***** Effects : Create graphe from leafs generated by the Split 																					*****
	********************************************************************************************************************************************************/
	void GCRCreationGraphe(vector <CFragment> vFRGLeafs, unsigned int uiHomogeneite, unsigned int uiTailleMin, unsigned int uiVersionNeighbor, unsigned int uiVersionMerge);

private:
	/********************************************************************************************************************************************************
	***** GCRLinkVertices : Method for link vertices in the graphe																						*****
	*********************************************************************************************************************************************************
	***** Input : puiPair : std::pair<unsigned int, unsigned int>												 										*****
	***** Precondition : Nothing																														*****
	***** Output : None																																	*****
	***** Effects : Link vertices of graphe	with modification of Min/Max of each vertices required														*****
	********************************************************************************************************************************************************/
	void GCRLinkVertices(std::pair<unsigned int, unsigned int> puiPair);

	/********************************************************************************************************************************************************
	***** GCRThreadRedef : Method calling by a thread																									*****
	*********************************************************************************************************************************************************
	***** Input : uiConnexite1, uiConnexite2 : unsigned int | puiMinMax : std::pair <unsigned int, unsigned int> 										*****
	***** Precondition : Nothing																														*****
	***** Output : None																																	*****
	***** Effects : Modifing Min/Max of vertices in the second connexity																				*****
	********************************************************************************************************************************************************/
	void GCRThreadRedef(unsigned int uiConnexite1, unsigned int uiConnexite2, std::pair <unsigned int, unsigned int> puiMinMax);

	/********************************************************************************************************************************************************
	***** GCRVerticesOnBorder : Method for detect fragment on borders  																					*****
	*********************************************************************************************************************************************************
	***** Input : vdVertice : BGLGraphe::vertex_descriptor																								*****
	***** Precondition : Need to Exist in the graphe																									*****
	***** Output : vbDirection : vector <bool>																											*****
	***** Effects : Return a vector of boolean for each direction																						*****
	********************************************************************************************************************************************************/
	vector <bool> GCRVerticesOnBorder(BGLGraphe::vertex_descriptor vdVertices);

	/********************************************************************************************************************************************************
	***** GCRDetectionVoisinVoxel : Method for create pairs of neighbor																					*****
	*********************************************************************************************************************************************************
	***** Input : vFRGLeafs : vector <CFragment> | uiTailleMin : unsigned int																			*****
	***** Precondition : Nothing																														*****
	***** Output : None																																	*****
	***** Effects : Filled the vector vpuiGPCVoisinPrimal (attribut) of pairs of neighbors with voxel													*****
	********************************************************************************************************************************************************/
	void GCRDetectionVoisinVoxel(vector <CFragment> vFRGLeafs, unsigned int uiTailleMin);

	/********************************************************************************************************************************************************
	***** GCRDetectionVoisinV2Dicho : Method for create pairs of neighbor																				*****
	*********************************************************************************************************************************************************
	***** Input : vFRGLeafs : vector <CFragment> | uiTailleMin : unsigned int																			*****
	***** Precondition : Nothing																														*****
	***** Output : None																																	*****
	***** Effects : Filled the vector vpuiGPCVoisinPrimal (attribut) of pairs of neighbors with vectors of vectors and dichotomous						*****
	********************************************************************************************************************************************************/
	void GCRDetectionVoisinV2Dicho(vector <CFragment> vFRGLeafs, unsigned int uiTailleMin);

	/********************************************************************************************************************************************************
	***** GCRDetectionVoisinDicho : Method for create pairs of neighbor																					*****
	*********************************************************************************************************************************************************
	***** Input : vFRGLeafs : vector <CFragment> | uiTailleMin : unsigned int																			*****
	***** Precondition : Nothing																														*****
	***** Output : None																																	*****
	***** Effects : Filled the vector vpuiGPCVoisinPrimal (attribut) of pairs of neighbors with vectors and dichotomous									*****
	********************************************************************************************************************************************************/
	void GCRDetectionVoisinDicho(vector <CFragment> vFRGLeafs, unsigned int uiTailleMin);

	/********************************************************************************************************************************************************
	***** GCRBestCompatibility : Method for find the best neighbor pair																					*****
	*********************************************************************************************************************************************************
	***** Entrée : puipuiFacteurFusionnable : std::pair<unsigned int, std::pair<unsigned int, unsigned int>> &											*****
	*****		   puiPair : std::pair<unsigned int, unsigned int> & | uiHomogeneite : unsigned int														*****
	***** Precondition : Nothing																														*****
	***** Output : None																																	*****
	***** Effects : Find the best compatibility of a neighbor pair																						*****
	********************************************************************************************************************************************************/
	void GCRBestCompatibility(std::pair<unsigned int, std::pair<unsigned int, unsigned int>> & puipuiFacteurFusionnable, std::pair<unsigned int, unsigned int> & puiPair, unsigned int uiHomogeneite);

	/********************************************************************************************************************************************************
	***** GCRThreadForMerge : Method for start each threads																								*****
	*********************************************************************************************************************************************************
	***** Entrée : puipuiFacteurFusionnable : std::pair<unsigned int, std::pair<unsigned int, unsigned int>> &											*****
	*****		   puiPair : std::pair<unsigned int, unsigned int> & | uiHomogeneite, uiDebut, uiFin : unsigned int										*****
	***** Precondition : Nothing																														*****
	***** Output : None																																	*****
	***** Effects : Starting each thread for reduce analyze time																						*****
	********************************************************************************************************************************************************/
	void GCRThreadForMerge(std::pair<unsigned int, std::pair<unsigned int, unsigned int>> & puipuiFacteurFusionnable, unsigned int uiHomogeneite, unsigned int uiDebut, unsigned int uiFin);

	/********************************************************************************************************************************************************
	***** GCRMerge : Method for merge neighbor																											*****
	*********************************************************************************************************************************************************
	***** Entrée : uiHomogeneite : unsigned int																											*****
	***** Precondition : Nothing																														*****
	***** Output : None																																	*****
	***** Effects : Merging neighbors																													*****
	********************************************************************************************************************************************************/
	void GCRMerge(unsigned int uiHomogeneite);

	/********************************************************************************************************************************************************
	***** GCRMergeThread : Method for merge neighbor with threads																						*****
	*********************************************************************************************************************************************************
	***** Entrée : uiHomogeneite : unsigned int																											*****
	***** Precondition : Nothing																														*****
	***** Output : None																																	*****
	***** Effects : Merging neighbors with threads																										*****
	********************************************************************************************************************************************************/
	void GCRMergeThread(unsigned int uiHomogeneite);

	/********************************************************************************************************************************************************
	***** GCRMergeSansChoix : Method for merge without choice																							*****
	*********************************************************************************************************************************************************
	***** Entrée : uiHomogeneite : unsigned int																											*****
	***** Precondition : Nothing																														*****
	***** Output : None																																	*****
	***** Effects : Merging neighbors with choice 																										*****
	********************************************************************************************************************************************************/
	void GCRMergeSansChoix(unsigned int uiHomogeneite);
};

#endif
